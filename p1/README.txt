Group Members:
	Eric Stevens
	Jong Park
	Zhenggan Zheng

################################################################################
Instruction:

Recommended method:
1. 	run 'make' or 'make all' to test the following method on 1000 random points:
 - brute force, 
 - divide and conquer, 
 - enhanced divide and conquer
2. or you could run 'make example' to test the methods on example file.

Manual Method:
1. generate random points using floatgen (see note 2)
2. to test the brute force method, run 
	python3 bruteforce [testfile]
3. to test the divide and conquer, run 
	python3 divideandconquer [testfile]
4. to test the enhanced divide and conquer, run 
	python3 bruteforce [testfile]

################################################################################
Note:
1. All source code is written in python version 3. 
2. By default, the program will automatically generate 1000 points. 
	To edit this, you may do so in the Makefile under 'float' or run the command:
	python3 source/floatgen.py [number] [filename]
3. files 'bruteforce', 'divideandconquer','enhanceddnc' all require a file as a 
	input containing list of points in x and y.

################################################################################
File Structure:
.
├── bruteforce			# Finds the closest two points using brute force method.
├── divideandconquer	# Finds the closest two points using Divide and Conquer method.
├── enhanceddnc			# Finds the closest two points using Enhanced D&C method.
├── example.input		# example input file.
├── Makefile			# make
├── output_bruteforce.txt			# Output file displays the following:
├── output_divideandconquer.txt		# line 1: second it took to solve the problem.
├── output_enhanceddnc.txt			# line 2: Two of the closest points.
├── rand				# Default random file generated by 'floatgen.py' using make
├── README.txt			# This file.
├── source
│   ├── bruteforce.py	# Backbone of the brute force method.
│   ├── enhanced.py		# Backbone of the enhanced D&C method.
│   ├── floatgen.py		# Generates random points 
						(example: floatgen.py [#_of_points] [output_file]
│   ├── General.py		# Backbone to do all the math shared between methods.
│   ├── naive.py		# Backbone of the Divide and Conquer method.
│   └── TESTPROGRAM.py	# Test program to test all three methods with 1000 random points.
1 directory, 16 files

